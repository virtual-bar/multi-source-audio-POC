{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Brandon Whittle\\\\Desktop\\\\Virtual Bar\\\\multi-source-audio-POC\\\\components\\\\AudioTrack.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Button } from './styles';\n\nvar useAudio = function useAudio(_ref) {\n  var initialGain = _ref.initialGain;\n\n  if (true) {\n    var AudioContext = window.AudioContext;\n\n    var _useState = useState(new AudioContext()),\n        audioCtx = _useState[0];\n\n    var _useState2 = useState(audioCtx.createGain()),\n        gainNode = _useState2[0];\n\n    gainNode.gain.value = initialGain;\n    return {\n      audioCtx: audioCtx,\n      gainNode: gainNode\n    };\n  }\n};\n\nvar AudioTrack = function AudioTrack(_ref2) {\n  var audioElement = _ref2.audioElement;\n\n  if (true) {\n    var _useState3 = useState(false),\n        _playing = _useState3[0],\n        setPlaying = _useState3[1];\n\n    var _useState4 = useState(0),\n        _volume = _useState4[0],\n        setVolume = _useState4[1];\n\n    var _useAudio = useAudio({\n      initialGain: 1\n    }),\n        audioCtx = _useAudio.audioCtx,\n        gainNode = _useAudio.gainNode;\n\n    var _togglePlaying = function _togglePlaying() {\n      if (audioCtx.state === 'suspended') {\n        audioCtx.resume();\n      }\n\n      setPlaying(!_playing);\n    };\n\n    var _changeVolume = function _changeVolume(e) {\n      var value = e.target.value;\n      setVolume(value);\n    };\n\n    var getAudioElement = function getAudioElement() {\n      return audioElement;\n    };\n\n    useEffect(function () {\n      var audioElement = getAudioElement();\n      var track = audioCtx.createMediaElementSource(audioElement);\n      track.connect(gainNode).connect(audioCtx.destination);\n    }, []);\n    useEffect(function () {\n      var audioElement = getAudioElement();\n\n      if (_playing && audioElement.paused) {\n        audioElement.play();\n      } else if (!_playing && !audioElement.paused) {\n        audioElement.pause();\n      }\n\n      gainNode.gain.value = _volume;\n    }, [_playing, _volume]);\n    return {\n      playing: _playing,\n      volume: _volume\n    };\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    \"data-playing\": playing,\n    className: \"control-play\",\n    role: \"switch\",\n    onClick: togglePlaying,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, playing ? 'Playing' : 'Paused'), __jsx(\"input\", {\n    type: \"range\",\n    id: \"volume\",\n    className: \"control-volume\",\n    min: \"0\",\n    max: \"2\",\n    value: volume,\n    onChange: changeVolume,\n    list: \"gainVals\",\n    step: \"0.01\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), __jsx(\"datalist\", {\n    id: \"gainVals\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, __jsx(\"option\", {\n    value: \"1\",\n    label: \"unity\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default AudioTrack;","map":{"version":3,"sources":["C:/Users/Brandon Whittle/Desktop/Virtual Bar/multi-source-audio-POC/components/AudioTrack.tsx"],"names":["React","useState","useEffect","Button","useAudio","initialGain","AudioContext","window","audioCtx","createGain","gainNode","gain","value","AudioTrack","audioElement","playing","setPlaying","volume","setVolume","togglePlaying","state","resume","changeVolume","e","target","getAudioElement","track","createMediaElementSource","connect","destination","paused","play","pause"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button } from './styles';\r\n\r\nconst useAudio = ({ initialGain }) => {\r\n  if (typeof window !== 'undefined') {\r\n    const AudioContext = window.AudioContext;\r\n    const [audioCtx] = useState(new AudioContext());\r\n    const [gainNode] = useState(audioCtx.createGain());\r\n\r\n    gainNode.gain.value = initialGain;\r\n\r\n    return { audioCtx, gainNode };\r\n  }\r\n};\r\n\r\nconst AudioTrack = ({ audioElement }) => {\r\n  if (typeof window !== 'undefined') {\r\n    const [playing, setPlaying] = useState(false);\r\n    const [volume, setVolume] = useState(0);\r\n\r\n    const { audioCtx, gainNode } = useAudio({ initialGain: 1 });\r\n\r\n    const togglePlaying = () => {\r\n      if (audioCtx.state === 'suspended') {\r\n        audioCtx.resume();\r\n      }\r\n      setPlaying(!playing);\r\n    };\r\n\r\n    const changeVolume = e => {\r\n      const {\r\n        target: { value }\r\n      } = e;\r\n      setVolume(value);\r\n    };\r\n\r\n    const getAudioElement = () => audioElement;\r\n\r\n    useEffect(() => {\r\n      const audioElement = getAudioElement();\r\n      const track = audioCtx.createMediaElementSource(audioElement);\r\n\r\n      track.connect(gainNode).connect(audioCtx.destination);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      const audioElement = getAudioElement();\r\n\r\n      if (playing && audioElement.paused) {\r\n        audioElement.play();\r\n      } else if (!playing && !audioElement.paused) {\r\n        audioElement.pause();\r\n      }\r\n\r\n      gainNode.gain.value = volume;\r\n    }, [playing, volume]);\r\n\r\n    return { playing, volume };\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        data-playing={playing}\r\n        className=\"control-play\"\r\n        role=\"switch\"\r\n        onClick={togglePlaying}\r\n      >\r\n        {playing ? 'Playing' : 'Paused'}\r\n      </Button>\r\n\r\n      <input\r\n        type=\"range\"\r\n        id=\"volume\"\r\n        className=\"control-volume\"\r\n        min=\"0\"\r\n        max=\"2\"\r\n        value={volume}\r\n        onChange={changeVolume}\r\n        list=\"gainVals\"\r\n        step=\"0.01\"\r\n      />\r\n      <datalist id=\"gainVals\">\r\n        <option value=\"1\" label=\"unity\" />\r\n      </datalist>\r\n    </>\r\n  );\r\n};\r\nexport default AudioTrack;\r\n"]},"metadata":{},"sourceType":"module"}