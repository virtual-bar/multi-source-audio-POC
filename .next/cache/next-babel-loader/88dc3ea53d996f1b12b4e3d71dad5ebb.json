{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brandon Whittle\\\\Desktop\\\\Virtual Bar\\\\multi-source-audio-POC\\\\components\\\\AudioTrack.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Button } from './styles';\n\nconst useAudio = ({\n  initialGain\n}) => {\n  if (false) {\n    const AudioContext = window.AudioContext;\n    const {\n      0: audioCtx\n    } = useState(new AudioContext());\n    const {\n      0: gainNode\n    } = useState(audioCtx.createGain());\n    gainNode.gain.value = initialGain;\n    return {\n      audioCtx,\n      gainNode\n    };\n  }\n};\n\nconst AudioTrack = ({\n  audioElement\n}) => {\n  const {\n    0: playing,\n    1: setPlaying\n  } = useState(false);\n  const {\n    0: volume,\n    1: setVolume\n  } = useState(0);\n\n  const togglePlaying = () => {\n    setPlaying(!playing);\n  };\n\n  const changeVolume = e => {\n    const {\n      target: {\n        value\n      }\n    } = e;\n    setVolume(value);\n  };\n\n  if (false) {\n    const {\n      audioCtx,\n      gainNode\n    } = useAudio({\n      initialGain: 1\n    });\n\n    const getAudioElement = () => audioElement;\n\n    useEffect(() => {\n      const audioElement = getAudioElement();\n      const track = audioCtx.createMediaElementSource(audioElement);\n      track.connect(gainNode).connect(audioCtx.destination);\n    }, []);\n    useEffect(() => {\n      const audioElement = getAudioElement();\n\n      if (playing && audioElement.paused) {\n        audioElement.play();\n      } else if (!playing && !audioElement.paused) {\n        audioElement.pause();\n      }\n\n      gainNode.gain.value = volume;\n    }, [playing, volume]);\n    return playing;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    \"data-playing\": playing,\n    className: \"control-play\",\n    role: \"switch\",\n    onClick: togglePlaying,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, playing ? 'Playing' : 'Paused'), __jsx(\"input\", {\n    type: \"range\",\n    id: \"volume\",\n    className: \"control-volume\",\n    min: \"0\",\n    max: \"2\",\n    value: volume,\n    onChange: changeVolume,\n    list: \"gainVals\",\n    step: \"0.01\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), __jsx(\"datalist\", {\n    id: \"gainVals\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, __jsx(\"option\", {\n    value: \"1\",\n    label: \"unity\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default AudioTrack;","map":{"version":3,"sources":["C:/Users/Brandon Whittle/Desktop/Virtual Bar/multi-source-audio-POC/components/AudioTrack.tsx"],"names":["React","useState","useEffect","Button","useAudio","initialGain","AudioContext","window","audioCtx","gainNode","createGain","gain","value","AudioTrack","audioElement","playing","setPlaying","volume","setVolume","togglePlaying","changeVolume","e","target","getAudioElement","track","createMediaElementSource","connect","destination","paused","play","pause"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button } from './styles';\r\n\r\nconst useAudio = ({ initialGain }) => {\r\n  if (typeof window !== 'undefined') {\r\n    const AudioContext = window.AudioContext;\r\n    const [audioCtx] = useState(new AudioContext());\r\n    const [gainNode] = useState(audioCtx.createGain());\r\n\r\n    gainNode.gain.value = initialGain;\r\n\r\n    return { audioCtx, gainNode };\r\n  }\r\n};\r\n\r\nconst AudioTrack = ({ audioElement }) => {\r\n  const [playing, setPlaying] = useState(false);\r\n  const [volume, setVolume] = useState(0);\r\n\r\n  const togglePlaying = () => {\r\n    setPlaying(!playing);\r\n  };\r\n\r\n  const changeVolume = e => {\r\n    const {\r\n      target: { value }\r\n    } = e;\r\n    setVolume(value);\r\n  };\r\n\r\n  if (typeof window !== 'undefined') {\r\n    const { audioCtx, gainNode } = useAudio({ initialGain: 1 });\r\n\r\n    const getAudioElement = () => audioElement;\r\n\r\n    useEffect(() => {\r\n      const audioElement = getAudioElement();\r\n      const track = audioCtx.createMediaElementSource(audioElement);\r\n\r\n      track.connect(gainNode).connect(audioCtx.destination);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      const audioElement = getAudioElement();\r\n\r\n      if (playing && audioElement.paused) {\r\n        audioElement.play();\r\n      } else if (!playing && !audioElement.paused) {\r\n        audioElement.pause();\r\n      }\r\n\r\n      gainNode.gain.value = volume;\r\n    }, [playing, volume]);\r\n\r\n    return playing;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        data-playing={playing}\r\n        className=\"control-play\"\r\n        role=\"switch\"\r\n        onClick={togglePlaying}\r\n      >\r\n        {playing ? 'Playing' : 'Paused'}\r\n      </Button>\r\n\r\n      <input\r\n        type=\"range\"\r\n        id=\"volume\"\r\n        className=\"control-volume\"\r\n        min=\"0\"\r\n        max=\"2\"\r\n        value={volume}\r\n        onChange={changeVolume}\r\n        list=\"gainVals\"\r\n        step=\"0.01\"\r\n      />\r\n      <datalist id=\"gainVals\">\r\n        <option value=\"1\" label=\"unity\" />\r\n      </datalist>\r\n    </>\r\n  );\r\n};\r\nexport default AudioTrack;\r\n"]},"metadata":{},"sourceType":"module"}