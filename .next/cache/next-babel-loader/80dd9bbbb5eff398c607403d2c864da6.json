{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brandon Whittle\\\\Desktop\\\\Virtual Bar\\\\multi-source-audio-POC\\\\components\\\\AudioTrack.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Button } from './styles';\n\nconst useAudio = ({\n  initialGain\n}) => {\n  if (false) {\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\n    const {\n      0: audioCtx\n    } = useState(new AudioContext());\n    const {\n      0: gainNode\n    } = useState(audioCtx.createGain());\n  }\n\n  gainNode.gain.value = initialGain;\n  return {\n    audioCtx,\n    gainNode\n  };\n};\n\nconst AudioTrack = ({\n  audioElement\n}) => {\n  const {\n    0: playing,\n    1: setPlaying\n  } = useState(false);\n  const {\n    0: volume,\n    1: setVolume\n  } = useState(false);\n  const {\n    audioCtx,\n    gainNode\n  } = useAudio({\n    initialGain: 1\n  });\n\n  const togglePlaying = () => {\n    if (audioCtx.state === 'suspended') {\n      audioCtx.resume();\n    }\n\n    setPlaying(!playing);\n  };\n\n  const changeVolume = e => {\n    const {\n      target: {\n        value\n      }\n    } = e;\n    setVolume(value);\n  };\n\n  const getAudioElement = () => audioElement;\n\n  useEffect(() => {\n    const audioElement = getAudioElement();\n    const track = audioCtx.createMediaElementSource(audioElement);\n    track.connect(gainNode).connect(audioCtx.destination);\n  }, []);\n  useEffect(() => {\n    const audioElement = getAudioElement();\n\n    if (playing && audioElement.paused) {\n      audioElement.play();\n    } else if (!playing && !audioElement.paused) {\n      audioElement.pause();\n    }\n\n    gainNode.gain.value = volume;\n  }, [playing, volume]);\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    \"data-playing\": playing,\n    className: \"control-play\",\n    role: \"switch\",\n    onClick: togglePlaying,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, playing ? 'Playing' : 'Paused'), __jsx(\"input\", {\n    type: \"range\",\n    id: \"volume\",\n    className: \"control-volume\",\n    min: \"0\",\n    max: \"2\",\n    value: volume,\n    onChange: changeVolume,\n    list: \"gainVals\",\n    step: \"0.01\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), __jsx(\"datalist\", {\n    id: \"gainVals\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, __jsx(\"option\", {\n    value: \"1\",\n    label: \"unity\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default AudioTrack;","map":{"version":3,"sources":["C:/Users/Brandon Whittle/Desktop/Virtual Bar/multi-source-audio-POC/components/AudioTrack.tsx"],"names":["React","useState","useEffect","Button","useAudio","initialGain","AudioContext","window","webkitAudioContext","audioCtx","gainNode","createGain","gain","value","AudioTrack","audioElement","playing","setPlaying","volume","setVolume","togglePlaying","state","resume","changeVolume","e","target","getAudioElement","track","createMediaElementSource","connect","destination","paused","play","pause"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button } from './styles';\r\n\r\nconst useAudio = ({ initialGain }) => {\r\n  if (typeof window !== 'undefined') {\r\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\r\n    const [audioCtx] = useState(new AudioContext());\r\n    const [gainNode] = useState(audioCtx.createGain());\r\n  }\r\n\r\n  gainNode.gain.value = initialGain;\r\n\r\n  return { audioCtx, gainNode };\r\n};\r\n\r\nconst AudioTrack = ({ audioElement }) => {\r\n  const [playing, setPlaying] = useState(false);\r\n  const [volume, setVolume] = useState(false);\r\n\r\n  const { audioCtx, gainNode } = useAudio({ initialGain: 1 });\r\n\r\n  const togglePlaying = () => {\r\n    if (audioCtx.state === 'suspended') {\r\n      audioCtx.resume();\r\n    }\r\n    setPlaying(!playing);\r\n  };\r\n\r\n  const changeVolume = e => {\r\n    const {\r\n      target: { value }\r\n    } = e;\r\n    setVolume(value);\r\n  };\r\n\r\n  const getAudioElement = () => audioElement;\r\n\r\n  useEffect(() => {\r\n    const audioElement = getAudioElement();\r\n    const track = audioCtx.createMediaElementSource(audioElement);\r\n\r\n    track.connect(gainNode).connect(audioCtx.destination);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const audioElement = getAudioElement();\r\n\r\n    if (playing && audioElement.paused) {\r\n      audioElement.play();\r\n    } else if (!playing && !audioElement.paused) {\r\n      audioElement.pause();\r\n    }\r\n\r\n    gainNode.gain.value = volume;\r\n  }, [playing, volume]);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        data-playing={playing}\r\n        className=\"control-play\"\r\n        role=\"switch\"\r\n        onClick={togglePlaying}\r\n      >\r\n        {playing ? 'Playing' : 'Paused'}\r\n      </Button>\r\n\r\n      <input\r\n        type=\"range\"\r\n        id=\"volume\"\r\n        className=\"control-volume\"\r\n        min=\"0\"\r\n        max=\"2\"\r\n        value={volume}\r\n        onChange={changeVolume}\r\n        list=\"gainVals\"\r\n        step=\"0.01\"\r\n      />\r\n      <datalist id=\"gainVals\">\r\n        <option value=\"1\" label=\"unity\" />\r\n      </datalist>\r\n    </>\r\n  );\r\n};\r\nexport default AudioTrack;\r\n"]},"metadata":{},"sourceType":"module"}